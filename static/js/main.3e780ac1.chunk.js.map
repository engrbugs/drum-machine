{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["KEYS","keyCode","keyTrigger","id","url","BeatBox","props","handleKeyPress","e","parent","document","getElementById","parentNode","classList","toggle","console","log","playSound","setTimeout","sound","currentSrc","updateDisplay","clipId","currentTime","play","audio","React","createRef","this","setState","key","Audio","clip","addEventListener","removeEventListener","onClick","ref","className","src","Component","App","state","display","String","fromCharCode","displayClipName","bind","name","$target","$","removeClass","addClass","map","idx","onAnimationEnd2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e780ac1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'animate.css/animate.css';\nimport $ from \"jquery\";\n\nconst KEYS = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heat',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Sega',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Oscillation',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Guitar',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Bass',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Tick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\n\nclass BeatBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audio = React.createRef();\n  }\n\n  handleKeyPress = (e)=> {\n    if (e.keyCode === this.props.keyCode) {\n      const parent = document.getElementById(this.props.keyTrigger);\n      parent.parentNode.classList.toggle('drum-pad-active');\n      console.log(parent.parentNode);\n      this.playSound();\n      setTimeout(() => parent.parentNode.classList.toggle('drum-pad-active'), 100);\n    }\n  }\n\n\n\n  componentDidMount() {\n    this.setState({\n      key: this.props.keyCode,\n      audio: new Audio(this.props.clip)\n    });\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n\n  playSound = () => {\n    const sound = document.getElementById(this.props.keyTrigger);\n    console.log(sound.currentSrc);\n    this.props.updateDisplay(this.props.clipId);\n    sound.currentTime = 0;\n    sound.play();\n  }\n  render () {\n    return  (\n      <div id={this.props.keyCode}\n        onClick={this.playSound} \n        ref={this.audio}\n        className=\"drum-pad\" \n         >\n          <audio className='clip'  id={this.props.keyTrigger} src={this.props.clip}></audio>\n          {this.props.keyTrigger}\n      </div>\n\n      // <div id={this.props.clipId} onClick={this.playSound}\n      // className=\"box\">\n      //   <audio className='clip' id={this.props.keyTrigger} src={this.props.clip}></audio>\n      //   {this.props.keyTrigger}</div>\n    )\n\n    \n            // <div className=\"box\" onClick={this.playSound}\n        // text={ key.keyTrigger } key={ idx }>\n        //   { key.keyTrigger }\n        // <audio ref={this.audio} id={key.keyTrigger}src={key.url}\n        // />\n        //   </div>\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: String.fromCharCode(160),\n    }\n    this.displayClipName = this.displayClipName.bind(this);\n  }\n  displayClipName(name) {\n      this.setState({\n        display: name\n      });\n      var $target = $('#display-inner');\n        $target.removeClass('animate__animated animate__bounceOut');\n        setTimeout(() => $target.addClass('animate__animated animate__bounceOut'), 100);\n  }\n  render() {\n    return (\n    <div id=\"drum-machine\" className=\"App display\">\n              <div className=\"logo\">\n            <div className=\"inner-logo\">{'BeatBox'}<small>{' by angerBUGS'}</small></div>\n          </div>\n      {KEYS.map((key, idx)=>(\n        <BeatBox\n          clipId={key.id} \n\t\t\t\t\tclip={key.url}\n\t\t\t\t\tkeyTrigger={key.keyTrigger}\n\t\t\t\t\tkeyCode={key.keyCode} \n\t\t\t\t\tupdateDisplay={this.displayClipName} />\n         \n        // <div className=\"box\" onClick={this.playSound}\n        // text={ key.keyTrigger } key={ idx }>\n        //   { key.keyTrigger }\n        // <audio ref={this.audio} id={key.keyTrigger}src={key.url}\n        // />\n        //   </div>\n      ))}\n       <div id=\"display\" className=\"display-text\" onClick={this.onAnimationEnd2}>\n          <div id=\"display-inner\" className=\"inner-text\"\n          >{this.state.display}</div>\n        </div>\n    </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}